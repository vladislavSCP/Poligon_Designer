(()=>{"use strict";class t extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}).innerHTML='\n      <style>\n        :host {\n          background:#333; display:flex; gap:20px; align-items:center;\n          padding:0 40px; box-sizing:border-box;\n        }\n        button{\n          font:inherit; padding:6px 28px; cursor:pointer; border-radius:3px;\n        }\n      </style>\n      <button id="create">Создать</button>\n      <button id="save">Сохранить</button>\n      <button id="reset">Сбросить</button>\n    '}connectedCallback(){const t=document.querySelector("#buffer"),e=document.querySelector("#workspace");this.shadowRoot.getElementById("create").addEventListener("click",()=>t.generatePolygons()),this.shadowRoot.getElementById("save").addEventListener("click",()=>{localStorage.setItem("polygons",JSON.stringify({buffer:t.serialize(),workspace:e.serialize()})),alert("Сохранено!")}),this.shadowRoot.getElementById("reset").addEventListener("click",()=>{localStorage.removeItem("polygons"),t.clear(),e.clear()})}}function e(t=6,e=50){const n=[];for(let a=0;a<t;a++){const t=Math.random()*Math.PI*2,a=e*(.5+.5*Math.random()),s=100+a*Math.cos(t),o=100+a*Math.sin(t);n.push(`${s},${o}`)}return n.join(" ")}customElements.define("tool-bar",t);class n extends HTMLElement{constructor({points:t=e(),color:n="var(--accent)"}={}){super(),this.attachShadow({mode:"open"}).innerHTML=`\n      <svg viewBox="0 0 200 200" preserveAspectRatio="xMidYMid meet">\n        <polygon fill="${n}" points="${t}"></polygon>\n      </svg>\n    `,this.dataset.points=t,this.dataset.color=n,this.draggable=!0}static fromData(t){return new n(t)}}customElements.define("svg-polygon",n);class a extends HTMLElement{constructor(){super()}connectedCallback(){this.addEventListener("dragstart",this.onDragStart),this.addEventListener("dragover",t=>t.preventDefault()),this.addEventListener("drop",this.onDrop),this.id&&localStorage.getItem("polygons")&&(JSON.parse(localStorage.getItem("polygons"))[this.id]||[]).forEach(t=>this.appendChild(n.fromData(t))),"workspace"===this.getAttribute("type")&&this.initGrid()}generatePolygons(){if("buffer"!==this.getAttribute("type"))return;this.clear();const t=5+Math.floor(16*Math.random());for(let e=0;e<t;e++)this.appendChild(new n)}onDragStart(t){t.dataTransfer.setData("text/plain","polygon"),t.dataTransfer.setDragImage(t.target,0,0),a.dragged=t.target}onDrop(t){a.dragged&&this.appendChild(a.dragged)}serialize(){return[...this.children].map(t=>({points:t.dataset.points,color:t.dataset.color}))}clear(){this.innerHTML=""}initGrid(){let t=1,e=0,n=0;const a=()=>{this.style.transform=`translate(${e}px,${n}px) scale(${t})`,this.style.transformOrigin="0 0",this.style.backgroundSize=`${50*t}px ${50*t}px`};this.style.backgroundImage="linear-gradient(#444 1px, transparent 1px),\n       linear-gradient(90deg,#444 1px, transparent 1px)",this.style.backgroundSize="50px 50px",a(),this.addEventListener("wheel",e=>{e.preventDefault();const n=e.deltaY>0?.9:1.1;t=Math.max(.2,Math.min(5,t*n)),a()});let s=!1,o=0,r=0;this.addEventListener("mousedown",t=>{1===t.buttons&&(s=!0,o=t.clientX,r=t.clientY)}),window.addEventListener("mousemove",t=>{s&&(e+=t.clientX-o,n+=t.clientY-r,o=t.clientX,r=t.clientY,a())}),window.addEventListener("mouseup",()=>s=!1)}}customElements.define("poly-zone",a)})();